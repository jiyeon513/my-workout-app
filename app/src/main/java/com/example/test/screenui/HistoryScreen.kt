package com.example.test.screenui

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import coil.compose.rememberAsyncImagePainter
import com.example.test.model.WorkoutRecord

@Composable
fun HistoryScreen(workoutRecords: List<WorkoutRecord>) {
    if (workoutRecords.isEmpty()) {
        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
            Text("ÏïÑÏßÅ Ïö¥Îèô Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§")
        }
    } else {
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            items(workoutRecords.sortedByDescending { it.date }) { record ->                 Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    shape = RoundedCornerShape(12.dp),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFF1F8E9))
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        // ÎÇ†Ïßú ÌëúÏãú
                        Text(
                            text = "üóì ${record.date} Ïö¥Îèô ÏôÑÎ£å!",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(8.dp))

                        // Ïö¥Îèô Í∏∞Î°ù Î¶¨Ïä§Ìä∏
                        record.logs.forEach { log ->
                            Text("- ${log.name} (${log.part}): ${log.sets}ÏÑ∏Ìä∏")
                        }

                        Spacer(modifier = Modifier.height(12.dp))

                        // Ïò§Ïö¥ÏôÑ ÏÇ¨ÏßÑÏù¥ ÏûàÏùÑ Í≤ΩÏö∞ ÌëúÏãú
                        record.imagePath?.let { path ->
                            Image(
                                painter = rememberAsyncImagePainter(path),
                                contentDescription = "Ïö¥Îèô ÏôÑÎ£å ÏÇ¨ÏßÑ",
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(180.dp)
                                    .padding(top = 8.dp),
                                contentScale = ContentScale.Crop
                            )
                        }
                    }
                }
            }
        }
    }
}
